<?php
// $Id: media_bliptv.module,v 1.1.2.1 2010/09/23 19:19:08 aaron Exp $

/**
 *  @file media_bliptv/media_bliptv.module
 *  Embedded Video Field provider file for BlipTV.com.
 */

/* ***************************************** */
/* INCLUDES                                  */
/* ***************************************** */

// A registry of variable_get defaults.
include_once('includes/media_bliptv.variables.inc');

/**
 * Implementation of hook_menu().
 */
function media_bliptv_menu() {
  return array(
    'admin/settings/media_bliptv' => array(
      'title' => 'Media: BlipTV',
      'description' => 'Administer the Media: BlipTV module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('media_bliptv_settings'),
      'access arguments' => array('administer media bliptv'),
      'file' => 'includes/media_bliptv.admin.inc',
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function media_bliptv_theme() {
  return array(
    'media_bliptv_flash' => array(
      'arguments' => array('code' => NULL, 'width' => NULL, 'height' => NULL, 'field' => NULL, 'item' => NULL, 'autoplay' => NULL, 'flv' => NULL, 'thumbnail' => NULL, 'options' => NULL),
      'file' => 'providers/emvideo/bliptv.inc'
    )
  );
}

/**
 * Implementation of hook_emfield_providers().
 */
function media_bliptv_emfield_providers($module, $provider = NULL) {
  // We know this module only includes the main provider file, avoid needless
  // PHP warnings.
  if ($module == 'emvideo' && (!isset($provider) || ($provider == 'bliptv'))) {
    static $path;
    // Cache the result for later.
    if (!isset($path)) {
      $found = drupal_system_listing("$provider\.inc$", drupal_get_path('module', 'media_bliptv') ."/providers/$module", 'name', 0);
      if (is_array($found) && !empty($found)) {
        $path = $found;
      }
    }
    return $path;
  }
}

/**
 * Implementation of media_mover hook
 * @param $op is the operator to return
 * @param $action is which action is being called
 * @param $verb is the verb being run
 * @param $configuration is the specific configuration saved for the action for this configuration
 * @param $file is the file in use
 * @param $job is the full configuration data currently running
 */
// function media_bliptv_media_mover($op = NULL, $action = NULL, $configuration = NULL, &$file=array(), $job = NULL, $nid = NULL) {
// //   switch ($op) {
// //     case 'name':
// //       return t('Media: BlipTV');
// //       break;
// //
// //     case 'actions':
// //       return array(
// //         'process' => array(
// //           1 => t('Upload video to BlipTV.'),
// //         ),
// //         'storage' => array(
// //           2 => t('Upload video to BlipTV.'),
// //         ),
// //       );
// //       break;
// //
// //     case 'process':
// //     case 'storage':
// //       module_load_include('inc', 'media_bliptv', 'includes/media_bliptv.media_mover');
// //       return media_bliptv_upload_video($file, $configuration);
// //       break;
// //
// //     case 'config':
// //       switch ($action) {
// //         case '1':
// //         case '2':
// //           module_load_include('inc', 'media_bliptv', 'includes/media_bliptv.media_mover');
// //           return media_bliptv_config($configuration);
// //       }
// //       break;
// //   }
// }

/**
 * Return the direct URL to this video.
 *
 * @param string $id
 *  The BlipTV video id.
 *
 * @return string
 *  The direct URL to the video in question.
 */
function media_bliptv_video_url($id) {
  return url('http://blip.tv/file/'. $id);
}

/**
 * Validation function for Media: BlipTV's Media Mover configuration form.
 *
 * @see media_bliptv_config().
 */
// function media_bliptv_validate_configuration($element, &$form_state) {
//   if ($values = media_mover_api_extract_form_data($element, $form_state)) {
//     foreach (array('media_bliptv_default_title' => t('Default title'), 'media_bliptv_default_description' => t('Default description')) as $field => $field_name) {
//       if (empty($values[$field])) {
//         // @TODO: Need to use 1 or 2 as specified by the configuration.
//         form_set_error('storage--media_bliptv--1--'. $field, t('%field field is required.', array('%field' => $field_name)));
//       }
//     }
//   }
// //   if (strlen($values['media_bliptv_default_description']) > media_bliptv_variable_get('description_length')) {
// //     form_set_error('storage--media_bliptv--1--media_bliptv_default_description', t('The default description must be @length characters or less.', array('@length' => media_bliptv_variable_get('description_length'))));
// //   }
// }
